# OTA example script
#
# This script is used to transfer image to external spi flash
# After booting into DFU mode, bootloader reads flash contents and flashes
# contents to module
# 
# Image loaded to external flash does not include bootloader(4kB) or topmost page(2kB)
# After the image is added one byte checksum
# Checksum byte calculation:
# initialize checksum to 0xbf
# add all bytes from binary to checksum
#
# Example OTA service contains 2 characteristics
# - control point characteristic 
#      This is used to control Flashing procedure
#      Write request must be used to send commands, because some commands may take a while
#      to process.
# - data transfer characteristic
#      Firmware image is transferred through this characteristic
#      Use write command procedure to achieve faster image upload
#
#
# OTA Procedure:
# - Enable power to external flash
#    Write byte 0x04 to control point
# - Erase Flash
#    Write request control point with data 0x00, to erase flash block 0
#    Write request control point with data 0x01, to erase flash block 1
# - Init upload
#    Write request control point with data 0x02, to initialize flashing
# - Upload Data
#    Use Write Commands to transfer firmware image to Data characteristic
#    NOTE! to simplify script data must be aligned to 256 byte boundaries
# - Flash Image
#    Boot device to DFU mode by writing 0x03 byte to control point

dim command
dim spi_response(4)
dim tmp(4)
dim spiresult
dim channel
dim spi_len
dim curr_connection
dim dfu_pointer  #current pointer to flash location to upload firmware
dim a
# Flash retry counter
dim retry_counter
# Flash retry counter
dim max_retries

# Chip select is in port 1.6 for external SPI flash
# SPI flash uses USART channel 0
# timer 0 flash block erase peeker

#init gap mode
event system_boot(major ,minor ,patch ,build ,ll_version ,protocol_version ,hw )
	
	#Set device to advertisement mode and allow undirected connections
	call gap_set_mode(2,2)
	
	# Initialize the DFU pointer
	dfu_pointer=0
	
	# Inti Flash retry counter and MAX retries
	retry_counter=0
	max_retries=10
	
	# set power pin as output and pull down
	# also set p1.1 to output (does not have internal pull-resistor)
	call hardware_io_port_config_pull(1,$7,1)
    call hardware_io_port_write(1,$7,0)    
	call hardware_io_port_config_direction(1,$3)
end

# Timer expired event handler 
# Poll flash and if it’s ready, and send response to the remote device (DFU application)
event hardware_soft_timer(handle)
	
	if handle=0 then
	    call hardware_io_port_config_direction(1,$7)
        call hardware_spi_transfer(0,2,"\x05\x00")(spiresult,channel,spi_len,spi_response(0:3))
		call hardware_io_port_config_direction(1,$3)
		
		# Check if max retries have been reached
		if (retry_counter < max_retries) then
			# Increase retry counter
			retry_counter = retry_counter + 1
		else
			# Could not talk to the flash : Report error core 0x90
			call attributes_user_write_response(curr_connection, $90)
		end if
		# Flash was not ready – check again later
        if spi_response(1:1) & 1 then
		    call hardware_set_soft_timer(6000,0,1)		
		else
			# Flash was ready, send response to the remote device (DFU application)
			call attributes_user_write_response(curr_connection, 0)
		end if
		
	end if
	
end

# Incoming data event listener
# Handles OTA Control Point Attribute (commands) and OTA Data Attribute (firmware update) writes
# and performs the necessary actions
event attributes_value(connection, reason, handle, offset, value_len, value_data)
	
	#save connection handle, is always 0 if only slave
	curr_connection=connection

	# Check if OTA control point attribute is written by the remote device and execute the command
		# Command 0 : Erase flash block 0 (0x0-0x1FFFF)
		# Command 1 : Erase flash block 1 (0x10000-0x3FFFF)
		# Command 2 : Reset DFU data pointer
		# Command 3 : Boot to DFU mode
	# In case of errors application error code 0x80 is returned to the remote device
	# In case the flash comms fails error code 0x90 is returned to the remote device
    if handle = ota_control then
		#attribute is user attribute, reason is always write_request_user
		if value_len >1 || offset >0 then
			# Not a valid command -> report application error code : 0x80
			call attributes_user_write_response(connection, $80)
		else
			command=value_data(0:1)
			if command=0 then	# Command 0 received -> Erase block 0
			
				#reset retry counter
				retry_counter=0
				
				#write enable, cs down
				call hardware_io_port_config_direction(1,$7)        
				call hardware_spi_transfer(0,1,"\x06")
                call hardware_io_port_config_direction(1,$3)
        
				# erase block 0 : 0-1ffff
                call hardware_io_port_config_direction(1,$7)
				call hardware_spi_transfer(0,4,"\xd8\x00\x00\x00")
				call hardware_io_port_config_direction(1,$3)        
				
				#start timer to poll for erase complete
				call hardware_set_soft_timer(6000,0,1)
			end if
			
			if command=1 then # Command 1 received -> Erase block 1	

				#reset retry counter
				retry_counter=0
				
				#write enable
				call hardware_io_port_config_direction(1,$7)
				call hardware_spi_transfer(0,1,"\x06")
				call hardware_io_port_config_direction(1,$3)

				# erase block 1 : 10000-3ffff
				call hardware_io_port_config_direction(1,$7)
				call hardware_spi_transfer(0,4,"\xd8\x01\x00\x00")
				call hardware_io_port_config_direction(1,$3)
				
				#start timer to poll for erase complete
                call hardware_set_soft_timer(6000,0,1)
			end if
			if command=2 then # Command 2 received -> Erase DFU pointer
				dfu_pointer=0
				call attributes_user_write_response(curr_connection, 0)
			end if
			if command=3 then # Command 3 received -> Boot to DFU mode 
				call system_reset(1)
			end if
			if command=4 then  # Command 4 received -> power up the SPI flash
			    #pull power and chip select pins up
                call hardware_io_port_write(1,$1,$1)
                call attributes_user_write_response(curr_connection, $0)
            end if
			if command>4 then # Unknown command -> report application error code : 0x80
				call attributes_user_write_response(curr_connection, $80)
			end if
			
		end if
	end if
	
	# Check if OTA data attribute is written which carries the firmware update
	# and store the data to the external SPI flash
	if handle = ota_data then
	
		# NOTE: when programming page, address cannot wrap over 256 byte boundary.
		# This must be handled in the remote DFU application	
		# This is write no response attribute, no need to handle response to other end
		# TODO: handle zero length writes
		spi_response(0:1)=2	#page program command
		
		#flip endianness for address
		tmp(0:4)=dfu_pointer
		spi_response(1:1)=tmp(2:1)
		spi_response(2:1)=tmp(1:1)
		spi_response(3:1)=tmp(0:1)
		
		# enable SPI flash write mode
		#write enable
		call hardware_io_port_config_direction(1,$7)
		call hardware_spi_transfer(0,1,"\x06")
		call hardware_io_port_config_direction(1,$3)
		
		#write data
		call hardware_io_port_config_direction(1,$7)
		call hardware_spi_transfer(0,4,spi_response(0:4))
		
		#send data in next transfer, leave chip select asserted
		call hardware_spi_transfer(0,value_len,value_data(0:value_len))
		call hardware_io_port_config_direction(1,$3)
		
		#it can take up to 800 us for full page to program
		#loop couple of times for write to complete
		call hardware_io_port_config_direction(1,$7)
		call hardware_spi_transfer(0,2,"\x05\x00")(spiresult,channel,spi_len,spi_response(0:2))#start polling
		a=spi_response(1:1)
		while a&1
			call hardware_spi_transfer(0,1,"\x00")(spiresult,channel,spi_len,spi_response(0:1))
			a=spi_response(0:1)
		end while
		call hardware_io_port_config_direction(1,$3)
		
		#increase DFU offset
		dfu_pointer=dfu_pointer+value_len
	end if
end

# Disconnection event handler 
# Makes the device visible and connectable
event connection_disconnected(handle,result)
	#in case if disconnect, return to advertisement mode
    call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
end
